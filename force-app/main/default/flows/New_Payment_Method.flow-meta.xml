<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <actionCalls>
        <name>Jump_to_payment_method</name>
        <label>Jump to payment method</label>
        <locationX>1106</locationX>
        <locationY>441</locationY>
        <actionName>c:FlowRedirect</actionName>
        <actionType>component</actionType>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>recordId</name>
            <value>
                <elementReference>newPaymentMethodId</elementReference>
            </value>
        </inputParameters>
    </actionCalls>
    <actionCalls>
        <name>newPaymentMethod</name>
        <label>newPaymentMethod</label>
        <locationX>932</locationX>
        <locationY>441</locationY>
        <actionName>PaymentMethodNewInvocable</actionName>
        <actionType>apex</actionType>
        <connector>
            <targetReference>Jump_to_payment_method</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>propIds</name>
            <value>
                <elementReference>recordId</elementReference>
            </value>
        </inputParameters>
        <outputParameters>
            <assignToReference>newPaymentMethodId</assignToReference>
            <name>output</name>
        </outputParameters>
    </actionCalls>
    <apiVersion>49.0</apiVersion>
    <assignments>
        <name>incrementTotalPaid</name>
        <label>incrementTotalPaid</label>
        <locationX>459</locationX>
        <locationY>627</locationY>
        <assignmentItems>
            <assignToReference>totalPaid</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>paymentsLoop.Amount_paid__c</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>paymentsLoop</targetReference>
        </connector>
    </assignments>
    <decisions>
        <name>hasCurrentPaymentMethodTest</name>
        <label>hasCurrentPaymentMethodTest</label>
        <locationX>518</locationX>
        <locationY>195</locationY>
        <defaultConnector>
            <targetReference>newPaymentMethod</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>hasCurrentPaymentMethod</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>getCurrentPaymentMethod</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>getPayments</targetReference>
            </connector>
            <label>hasCurrentPaymentMethod</label>
        </rules>
    </decisions>
    <decisions>
        <name>hasErrorTest</name>
        <label>hasErrorTest</label>
        <locationX>671</locationX>
        <locationY>444</locationY>
        <defaultConnector>
            <targetReference>newPaymentMethod</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>hasError</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>errorMessage</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>errorScreen</targetReference>
            </connector>
            <label>hasError</label>
        </rules>
    </decisions>
    <formulas>
        <name>errorMessage</name>
        <dataType>String</dataType>
        <expression>IF(NOT(ISBLANK({!getCurrentPaymentMethod.Amount_to_pay__c})) &amp;&amp; 
  {!getCurrentPaymentMethod.Amount_to_pay__c} &gt; {!totalPaid},
 &quot;ERROR: Current payment method is not fully paid.  Remaining to be paid: &quot; &amp;
 TEXT({!getCurrentPaymentMethod.Amount_to_pay__c} - {!totalPaid}),
null
)</expression>
    </formulas>
    <interviewLabel>newPaymentMethod {!$Flow.CurrentDateTime}</interviewLabel>
    <label>New Payment Method</label>
    <loops>
        <name>paymentsLoop</name>
        <label>paymentsLoop</label>
        <locationX>458</locationX>
        <locationY>446</locationY>
        <collectionReference>getPayments</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>incrementTotalPaid</targetReference>
        </nextValueConnector>
        <noMoreValuesConnector>
            <targetReference>hasErrorTest</targetReference>
        </noMoreValuesConnector>
    </loops>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>FREE_FORM_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processType>Flow</processType>
    <recordLookups>
        <name>getCurrentPaymentMethod</name>
        <label>getCurrentPaymentMethod</label>
        <locationX>176</locationX>
        <locationY>193</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>hasCurrentPaymentMethodTest</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Proposal__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>recordId</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Payment_Method__c</object>
        <sortField>CreatedDate</sortField>
        <sortOrder>Desc</sortOrder>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>getPayments</name>
        <label>getPayments</label>
        <locationX>190</locationX>
        <locationY>438</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>paymentsLoop</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Payment_Method__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>getCurrentPaymentMethod.Id</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>false</getFirstRecordOnly>
        <object>Payment__c</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <screens>
        <name>errorScreen</name>
        <label>errorScreen</label>
        <locationX>680</locationX>
        <locationY>628</locationY>
        <allowBack>false</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>false</allowPause>
        <fields>
            <name>errorUnverifiedPaymentMethod</name>
            <fieldText>&lt;p&gt;{!errorMessage}&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>true</showHeader>
    </screens>
    <start>
        <locationX>50</locationX>
        <locationY>50</locationY>
        <connector>
            <targetReference>getCurrentPaymentMethod</targetReference>
        </connector>
    </start>
    <status>Active</status>
    <variables>
        <name>newPaymentMethodId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>paymentMethod</name>
        <dataType>SObject</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>true</isOutput>
        <objectType>Payment_Method__c</objectType>
    </variables>
    <variables>
        <name>paymentMethods</name>
        <dataType>SObject</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>true</isOutput>
        <objectType>Payment_Method__c</objectType>
    </variables>
    <variables>
        <name>recordId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>totalPaid</name>
        <dataType>Currency</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <scale>2</scale>
    </variables>
</Flow>
